#Ch.1 Let's java
- 자바 컴파일러는 자바 가상머신이 이해할 수 있는 코드를 생성
- 바이트코드 : 컴파일러에 의해 생성되는 코드
- 자바 프로그램을 실행하면 main 메소드 안에 있는 문장들이 순차적으로 실행

#Ch.2 변수와 자료형
- 변수 : 데이터의 저장과 참조를 위해 '할당된 메모리 공간'에 붙인 이름
- 변수 선언 : 메모리 공간이 할당되고 해당 공간에 이름이 붙음. 그 이름으로 해당 메모리 공간에 접근 가능.
- int num; : 변수종류는 int(정수)형이며 num이라는 이름을 가짐.
- 기호 = 는 대입연삱로 연산자의 오른편의 값이 왼편의 변수에 대입된다.
- 처음 값을 지정하는 일은 초기화라고 한다.
- double num1, num2; 같은 방식으로 두개의 변수를 동시에 선언 가능하다.
- 키워드 : double, int등 자바에서 미리 정의한 단어들로 변수명으로 사용할 수 없다.
- 정수 자료형 : byte(1byte), short(2byte), int(4byte), long(8byte)
- 실수 자료형 : float(4byte), double(8byte)
- short와 int 모두 정수 자료형이지만 바이트의 크기가 다르다. short가 더 작은 크기이므로 더 합리적으로 보일 수 있으나 <font color=red>**자바는 기본적으로 정수형 연산을 int로만 진행**</font>하기 때문에 오히려 데이터 변환 과정만 추가되어 메모리가 절약되지 않을 수 있다.
- float와 double모두 실수 자료형으로 둘의 차이는 정밀도에 있다. 실수 표현에 사용되는 바이트의 크기가 커지면 오차의 크기가 줄어 정밀도가 높아진다. 즉, float보다 double의 정밀도가 높다.
- 문자 자료형 : char(2byte) 작은 따옴표 사용
- 하드웨어는 기본적으로 숫자를 인식하고 저장하지만 실제 사용자들은 문자를 사용하므로 문자에 숫자를 부여한다. 각 나라마다 문자가 다르기 때문에 모든 나라의 문자를 수용하여 전세계적으로 사용할 수 있는 문자셋이 유니코드이다.
- 문자열 자료형 : String(문자열을 저장하는 자료형) 큰 따옴표 사용
- 논리 자료형 : boolean(1byte)
- boolean은 참과 거짓을 나타내는 자료형이다. 

#Ch.3 상수와 형 변환
- 상수 (Constant) : 변하지 않는 값
- 자바에서는 한번 값이 정해진 후에 변경이 불가능한 변수 또한 상수라고 부른다.
- 변수를 선언할때 앞에 final을 붙이면 그 변수는 상수가 된다.
- 상수를 선언만 하고 값을 할당하지 않은 경우 한 번은 값을 할당할 수 있다.
- 상수는 대문자로 작성하는 것이 관례이다.
- 리터럴 : 변수를 선언과 동시에 특정 값으로 초기화 하면 해당 값을 **리터럴, 리터럴상수, 상수** 라고 부른다.
- 자바는 기본적으로 정수형을 int로 처리한다. 그러나 숫자의 크기가 너무 커 long 자료형을 사용해야 하는 경우가 있다. 이때 그냥 숫자만 입력했을때 자바는 해당 자료형을 자동으로 long타입으로 인식하지 않는다. 이때 숫자 뒤에 L을 붙여주면 long타입으로 인식한다.
- 자바는 기본적으로 실수형을 double로 처리한다. 그러나 float타입으로 사용하고 싶은 경우 숫자 뒤에 F를 붙여준다.
- 자바는 수를 연산할 때 숫자의 자료형이 같아야 연산 가능하다. 이때 자료형이 다르다면 한가지의 자료형으로 변환과정을 먼저 거친 후 연산을 진행한다. 이를 자료형 변환, 형변환 이라고 한다.
- 자동 형변환 : 자료형의 크기가 큰 방향으로 변환, 크기에 상관없이 정수보다 실수 자료형이 우선한다.
- 명시적 형 변환(Explicit Conversion) : 자동 형 변환이 진행되지 않는 경우에도 필요시 명시적 형 변환을 통해 변환시킬 수 있다.
- 실수형 데이터를 정수형으로 변환시 소수점 이하의 값이 잘려 나간다.

```java
short num1 = 1;
short num2 = 2;
short num3 = num1 + num2; // 에러 발생
short num3 = (short)(num1 + num2); // 명시적 형변환
```
- 위의 경우 소괄호 두 번 등장한다. short를 감싼 소괄호는 형 변환을 목적으로 사용되었고, num1 + num2를 감싼 소괄호는 연산을 묶는 목적으로 사용되었다.

#Ch.4 연산자
- 연산자 : 연산을 목적으로 정의된 기호.
- 이항연산자 : 피연산자가 둘
- 대입연산자 : =, +=, -=, *=, /=, %=
- '='' : 연산자 오른쪽의 값을 왼쪽 변수에 대입.
- '+' : 두 피연산자의 값을 더한다.
- '-'' : 두 피연산자의 값을 뺀다.
- '*' : 두 피연산자의 값을 곱한다.
- '/' : 두 피연산자의 값을 나눈다.
- '%' : 왼쪽의 피연산자를 오른쪽의 피연산자로 나눴을 때 얻게 되는 **나머지를 반환.**
- 복합 대입 연산자 : 대입 연산자가 다른 연산자와 묶여서 정의된 형태의 연산자이다.
- a = a + b > a += b
- a = a - b > a -= b
- a = a * b > a *= b
- a = a / b > a /= b
- a = a % b > a %= b
- a = a & b > a &= b
- a = a ^ b > a ^= b
- a = a <<b > a <<= b
- a = a >>> b > a >>>= b
