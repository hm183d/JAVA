
# 자바란?

- 자바 응용프로그램은 운영체제나 하드웨어가 아닌 JVM하고만 통신하며 JVM이 자바 응용프로그램으로부터 전달받은 명령을 해당 운영체제가 이해할 수 있도록 변환하여 전달한다.
- 객체지향 프로그래밍언어로 **상속, 캡슐화, 다형성**을 특징으로 갖는다.
- 자바로 작성된 프로그램이 실행되면 가비지컬렉터가 메모리를 관리한다.

# JVM
- 자바를 실행하기 위한 가상 컴퓨터

# 변수
- 변수 = 값을 저장할 수 있는 메모리상의 공간
- 변수는 단 하나의 값만 저장가능하므로 새로운 값을 저장하면 기존의 값은 사라진다.
- 변수를 선언하려면 변수를 선언해야 한다.
- e.g) int age ;; age라는 이름의 int 정보형 변수를 선언한다.
- 변수를 사용 전 반드시 초기화를 거쳐야 한다.
- 변수에 값을 저장할때는 대입연산자 =를 사용하며 오른쪽의 값을 왼쪽 변수에 저장한다는 의미이다.
- 변수가 여러개일때 타입이 같다면 콤마,로 구분하여 여러변수를 한 줄에 선언 가능하다.

```java
 public static void main(String[] args) {
    int year = 0; //year라는 변수 0으로 초기화
    int age = 14; //age라는 변수 14로 초기화

    System.out.println(year);
    System.out.println{age};

    year = age + 2000; //age라는 변수에 2000을 더해서 year에 저장
    age = age + 1; // age변수값에 1을 더해서 age변수에 저장

    System.out.println(year); 
    SYstem.out.println(age);
 }
 ```
 - 마지막 year의 결과값은 2014, age의 결과값은 15가 된다.
 - 초반 year과 age의 값은 0과 14였으나 문장을 처리하는 과정을 지나가며 year는 age에 2000을 더한 값을 저장하며 값이 수정되었고, age는 age변수 값에 1을 더하며 age변수의 값이 수정되었다.
<br>
<br>

- x 와 y의 값을 교환하려면 다른 임시저장 변수를 추가하여 교환해야 한다. x의 값을 y에 넣은 후 y의 값을 x에 넣으려고 할 때 이미 y의 값은 x로 변경되어 있기 때문에 제대로 교환이 이루어지지 않는다.
<br>
<br>

# 변수의 타입
- 변수는 크게 문자와 숫자형으로 나누어지며 숫자는 정수와 실수로 분류된다.
- 자료형 : 문자형(char), 정수형(byte,short,int,long), 실수형(float,double)
- 기본형 변수는 실제 값인 데이터만 저장
- 참조형 변수는 값이 저장되어있는 주소를 값으로 저장한다. 참조형 변수는 연산을 할 수 없다.
- 참조형 변수를 선언하는 방식은 "클래스 이름 변수이름;;" 으로 표시한다.

```java
    Date today = new Date(); //Date라는 클래스를 생성하고 값이 저장되는 주소를 today라는 변수에 저장한다.
```
<br>
<br>

# 상수와 리터럴
- 상수 : 값을 저장할 수 있는 공간이지만 변수와 달리 한번 값을 저장하면 다른 값으로 변경이 불가능
- 상수는 선언과 동시에 초기화 해야한다.
- 리터럴 : 수학에서 말하는 상수값을 리터럴이라고 한다(123, 1,2)
- 실제 연산을 진행할때 굳이 상수를 쓰는 이유가 있다.
```java
    int triangleArea = (10*20)/2; // 리터럴값 사용
    int rectangleArea = 10*20; // 리터럴값 사용

    final int WIDTH = 10; // 폭
    final int HEIGHT = 20; // 높이
    
    int triangleArea = (WIDTH*HEIGHT)/2;
    int rectangleArea = WIDTH*HEIGHT;
```

- 이 코드처럼 리터럴 값을 사용하면 해당 숫자가 무엇을 가리키는지 알 수 없으나 상수를 선언하여 수식을 진행하면 정확히 무슨 연산을 하는것인지 알 수 있다.
<br>
- 정수형 리터럴은 int가 기본형, 실수형 리터럴은 double이 기본형이다. 자바가 자동으로 해당 자료형으로 수식을 진행하기 때문에 연산하는 두 피연산자는 같은 자료형이어야 한다.
- 두 피연산자의 타입이 달라도 저장범위가 더 큰 타입에 좁은타입의 값을 저장할 수 있다.
- println()은 변수의 값을 그대로 출력하고 개행한다.
- printf()는 지시자를 통해 변수의 값을 다양한 형식으로 변환하여 출력한다.
```java
    int age = 14;
    System.out.printf("age:%d, age); // age : 14 라고 출력된다.
```
<br>
<br>

- printf()의 지시자는 여러종류가 있다.
    - %b : boolean형식 출력
    - %d : 10진(decimal)정수 형식으로 출력
    - %o : 8진(octal)정수 형식으로 출력
    - %x : 16진(hexa-decimal)정수의 형식으로 출력
    - %f : 부동소수점(floating-point)형식으로 출력
    - %e : 지수(exponent)형식으로 출력
    - %c : 문자(character) 형식으로 출력
    - %s : 문자열(String) 형식으로 출력
<br>
<br>

# 화면에서 입력 받기
- 화면으로부터 입력 받으려면 Scanner클래스를 추가해야한다.
```java
import java.util.*; //스캐너 메소드 추가

class ScannerEx {
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in); //스캐너 객체 생성

        System.out.print("두자리 정수를 한개 입력해주세요");//출력
        String input = scanner.nextLine();//사용자가 입력한 값을 input이라는 변수에 저장
        int num = Integer.parseInt(input);//입력받은문자를 int형으로 변환환

        System.out.println("입력내용 :" + input);
        System.out.println("num = %d%n", num);
    }
}
```

- 정수값을 사용자가 입력한다고 해도 해당 숫자는 문자열로 먼저 반환된다.(String 문자형이기 때문에)
- 문자열을 다시 int정수형으로 변형하기 위해서 Integer.parseInt메서드를 사용한다.

<br>
<br>

# 기본형(논리형, 문자형)
- 논리형은 boolean변수 하나로 값을 참과 거짓 둘만을 가진다.
- boolean의 기본형은 false이다.
- 문자형은 char타입 한가지로 단 하나의 문자만을 저장할 수 있다.
- char타입 변수에는 문자가 저장되는 것 같지만 해당 문자의 유니코드 정수가 저장된다.
<br>
<br>

# 정수형(byte, short, int, long)
- JVM의 피연산자는 기본적으로 4byte로 저장되기 때문에 int형을 사용하는 것이 가장 효율적이다.

# 실수형(float, double)
- float은 소숫점 6자리까지 표현 가능
- double은 소숫점 14자리까지 표현 가능하다
- 정밀도가 중요한 경우 float보다 double을 사용하는 것이 좋다.
- 실수형 값을 출력할 때는 printf메서드의 지시자인 %f를 사용한다. 소숫점 6자리까지만 표현하므로 7번째 자리 숫자에서 반올림된다.

<br>
<br>

# 형변환

- 형변환이란 변수나 상수의 타입을 다른 타입으로 변환하는 것이다.
- int타입과 float타입의 값을 연산하는 경우 두 값의 타입이 같아야 하기 때문에 float타입으로 형 변환을 시킨다.(float이 더 크기 때문)
- 형을 변환하는 방법 : (원하는 타입)피연산자
- 형 변환 연산자는 피연산자의 값을 지정된 타입으로 변환해서 값을 반환할 뿐이며 실제 피연산자의 값을 바꾸지는 않는다.
- 실수형을 정수형으로 형변환할 때는 반올림이 발생하지 않는다. 즉 1.666을 int로 변형할 경우 값은 1이 된다. 

# 자동 형변환
- 두 피연산자를 연산할 때 둘의 타입이 서로 다르다면 저장값의 범위가 더 큰 타입으로 자동 변환된다.
- 그러나 해당 변수가 저장할 수 있는 값의 범위보다 더 큰 값을 저장하려는 경우에는 형변환을 생략할 시 에러가 발생한다.
- 자동 형 변환은 기존의 값을 최대한 보존할 수 있는 타입으로 자동 형변환 한다.
- 기본형은 boolean을 제외하고 서로 형변환이 가능하며, 기본형과 참조형은 서로 형변환 할 수 없다.