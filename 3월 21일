1. 클래스가 무엇인지
2. 컬렉션 프레임워크
3. 예외처리
4. 상속

(p.172)
```java
String accNumber;     // 계좌번호가 있음
    String ssNumber;     // 주민번호 입력
    int balance;     // 예금 잔액 값(정수
    
        public BankAccount(String acc, String ss, int bal) {
        accNumber = acc;
        ssNumber = ss;
        balance = bal; //생성자(Constructor)는 클래스 이름과 동일하게 만들어야 함
    } //acc 값을 받고 accNumber에 저장, ss 값을 받고 ssNumber에 저장, bal 값을 받고 balance에 저장

    class BankAccountConstructor {
    public static void main(String[] args) {
        BankAccount yoon = new BankAccount("12-34-89", "990990-9090990", 10000); // 각자의 정보를 갖고 BankAccount에 저장된다.
        BankAccount park = new BankAccount("33-55-09", "770088-5959007", 10000);

        yoon.deposit(5000);
        park.deposit(3000);

        yoon.withdraw(2000);
        park.withdraw(2000);

        yoon.checkMyBalance();
        park.checkMyBalance();  
    }
}
```
<br>
<br>

실습)
메가커피가게 클래스를 작성하세요.
- 정보 : 지점명, 대표자명, 메뉴명(배열), 메뉴가격(배열), 알바생이름(배열)
- 처리 : 주문받기(현장/앱), 매출조회, 매출조회, 알바생근무기록조회

```java
package a;
	//메가커피가게 클래스를 작성하세요.
	// 정보 : 지점명, 대표자명, 메뉴명(배열), 메뉴가격(배열), 알바생이름(배열)
	// 처리 : 주문받기(현장/앱), 매출조회, 매출조회, 알바생근무기록조회
	
	import java.time.LocalDateTime;
public class MegaCoffee {
	
	String branchName;
	String ownername;
	String[] menuArr;
	int[] priceArr;
	String[] baitoNameArr;
	
	void receiveOrder(char ordertype, String[] menu, int[] amount, char payType) {};
	void searchSales(LocalDateTime from, LocalDateTime to, char type, String text ) {};
	void searchBaitoWorkHistory(LocalDateTime from, LocalDateTime to, char Type, String text ) {};
	
}
```
<br>
- 우클릭 > source > Generate getters and setters > Select All > Generate : 자동으로 데이터를 가져오고 보내는 메소드 생성
<br>
<br>

```java
public class A {

	private int a;
	private String s; // 캡슐화 : 모든 정보를 은닉해야한다
	private boolean b; // java bean(자바콩) 모든 정보를 은닉해야한다
	public int getA() {
		return a;
	}
	public void setA(int a) {
		this.a = a;
	}
	public String getS() {
		return s;
	}
	public void setS(String s) {
		this.s = s;
	}
	public boolean isB() {
		return b;
	}
	public void setB(boolean b) {
		this.b = b;
	}

	
}
```

- Static  final : 해당 클래스에서 절대 지워져서는 안되는 상수.
- static 끼리는 호출 가능하지만, static과 non-static은 호출 불가능하다. 이를 해결하려면 new를 사용하여 객체를 생성해야한다.
<br>
<br>
```java
public class B {

	public static void main(String[] args) {
		new B().b(); // b()만 사용하면 에러가 발생한다. b()가 static이 아니기 때문에 객체를 생성해야한다.
		
	}
	void b() {
		
	}
}
```
<br>
<br>
